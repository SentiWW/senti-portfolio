---
import { getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";

import ContactCTA from "../../components/ContactCTA.astro";
import Hero from "../../components/Hero.astro";
import Icon from "../../components/Icon.astro";
import Grid from "../../components/Grid.astro";

import sanitize from "../../helpers/uriSanitizer";

const { entry } = Astro.props;

interface Post {
  title: string;
  slug: string;
  img: string;
  img_alt: string;
  publishDate: Date;
}

interface BlogTags {
  slug: string;
  tag: string;
  posts: Post[];
}

interface Props {
  entry: BlogTags;
}

export async function getStaticPaths() {
  const blog = await getCollection("blog");
  const uniqueTags: string[] = [];

  blog.forEach((post) => {
    post.data.tags.forEach((tag) => {
      if (!uniqueTags.includes(tag)) {
        uniqueTags.push(tag);
      }
    });
  });

  const entries: BlogTags[] = [];
  for (let i = 0; i < uniqueTags.length; i++) {
    const currentSlug = sanitize(uniqueTags[i]);
    const currentTag = uniqueTags[i];
    const blogsWithTag = blog.filter((post) =>
      post.data.tags.map((tag) => sanitize(tag)).includes(currentSlug)
    );

    const posts: Post[] = [];
    for (let j = 0; j < blogsWithTag.length; j++) {
      const currentPost = blogsWithTag[j];
      posts.push({
        title: currentPost.data.title,
        slug: currentPost.slug,
        img: currentPost.data.img,
        img_alt: currentPost.data.img_alt,
        publishDate: currentPost.data.publishDate,
      });
    }

    entries.push({
      tag: currentTag,
      slug: currentSlug,
      posts: posts.sort(
        (a, b) => b.publishDate.valueOf() - a.publishDate.valueOf()
      ),
    });
  }

  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
---

<BaseLayout
  title={`${entry.tag} | Wojciech Warwas`}
  description={`${entry.tag} tag used in my blog.`}
>
  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/blog/"><Icon icon="arrow-left" />Blog</a>
          <Hero title={`${entry.tag} tag`} align="start">
            <div class="details">
              <p class="description">
                All blog posts containing the {entry.tag} tag.
              </p>
            </div>
          </Hero>
        </div>
      </header>
      <main class="wrapper stack gap-8">
        <Grid variant="offset">
          {
            entry.posts.map((post) => (
              <li>
                <a class="card" href={`/blog/${post.slug}/`}>
                  <span class="title">{post.title}</span>
                  <img
                    src={post.img}
                    alt={post.img_alt || ""}
                    loading="lazy"
                    decoding="async"
                  />
                </a>
              </li>
            ))
          }
        </Grid>
      </main>
    </div>
    <ContactCTA />
  </div>
</BaseLayout>

<style>
  header {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .back-link {
    display: none;
  }

  .details {
    display: flex;
    flex-direction: column;
    padding: 0.5rem;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }

  .description {
    font-size: var(--text-lg);
    max-width: 54ch;
  }

  .content {
    max-width: 65ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {
    border-radius: 1.5rem;
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
  }

  .content :global(blockquote) {
    font-size: var(--text-lg);
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--gray-0);
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      display: block;
      align-self: flex-start;
    }

    .details {
      flex-direction: row;
      gap: 2.5rem;
    }

    .content :global(blockquote) {
      font-size: var(--text-2xl);
    }
  }

  .card {
    display: grid;
    grid-template: auto 1fr / auto 1fr;
    height: 11rem;
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
    border-radius: 0.75rem;
    overflow: hidden;
    text-decoration: none;
    font-family: var(--font-brand);
    font-size: var(--text-lg);
    font-weight: 500;
  }

  .title {
    grid-area: 1 / 1 / 2 / 2;
    z-index: 1;
    margin: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--gray-999);
    color: var(--gray-200);
    border-radius: 0.375rem;
  }

  img {
    grid-area: 1 / 1 / 3 / 3;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  @media (min-width: 50em) {
    .card {
      height: 22rem;
      border-radius: 1.5rem;
    }

    .title {
      border-radius: 0.9375rem;
    }
  }
</style>
